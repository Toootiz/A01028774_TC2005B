/*
Manage the flow of the Simon game
Keep track of the turn, and the list of buttons to press
Gabriel Muñoz Luna
2024-04-24
*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;
using System;

public class SimonController : MonoBehaviour
{
    [SerializeField] List<SimonButton> buttons;
    [SerializeField] List<int> sequence;
    [SerializeField] float delay;
    [SerializeField] int level;
    [SerializeField] bool playerTurn = false;

    [SerializeField] int counter = 0;

    //[SerializeField] int numButtons = 0;

    [SerializeField] GameObject buttonPrefab;

    [SerializeField] Transform buttonParent;
    [SerializeField] TextMeshProUGUI Texto;

    [SerializeField] TextMeshProUGUI Turno;
    
    [SerializeField] TextMeshProUGUI Max;

   public string apiData = @"
    {
        ""buttons"": [
            {
                ""id"": 0,
                ""r"": 1.0,
                ""g"": 0.0,
                ""b"": 0.0
            },
            {
                ""id"": 1,
                ""r"": 0.1,
                ""g"": 0.0,
                ""b"": 0.0
            },
            {
                ""id"": 2,
                ""r"": 0,
                ""g"": 0,
                ""b"": 255
            }
        ]
    }
    ";

    [SerializeField] ColorButtons allButtons;

    // Start is called before the first frame update
    void Start()
    {
        DisplayHighScore();
        //PrepareButtons();
        Texto.text = "Simon Says";
        Turno.text = "Turno: 0";
        AddToSequence();
        GetComponent<APIConection>().GetData();
    }

     public void GameOver() {
        StartCoroutine(HandleGameOver(level));
    }

    private void DisplayHighScore() {
        int highScore = PlayerPrefs.GetInt("HighScore", 0);  // Obtiene el puntaje máximo guardado
        Max.text = $"High Score: {highScore}";  // Muestra el puntaje máximo en la UI
    }

    // Configure the callback functions for the buttons
    /*
    void PrepareButtons()
    {
        
        //for (int i=0; i<numButtons; i++) {
            //int index = i;
            
            // Create the copies of the button as children of the panel

            GameObject newButton = Instantiate(buttonPrefab, buttonParent);
            //newButton.GetComponent<Image>().color = Color.HSVToRGB((float)index/numButtons, 1, 1);
            //newButton.GetComponent<SimonButton>().Init(index);
            buttons.Add(newButton.GetComponent<SimonButton>());
            buttons[i].gameObject.GetComponent<Button>().onClick.AddListener(() => ButtonPressed(index));

        
        }
        */

    public void PrepareButtons()
        {
            //convert the json into an object
            allButtons = JsonUtility.FromJson<ColorButtons>(apiData);

            foreach (ColorButton buttonData in allButtons.buttons)
            {
                GameObject newButton = Instantiate(buttonPrefab, buttonParent);
                newButton.GetComponent<Image>().color = new Color(buttonData.r, buttonData.g, buttonData.b);
                newButton.GetComponent<SimonButton>().Init(buttonData.id);
                buttons.Add(newButton.GetComponent<SimonButton>());
                newButton.GetComponent<Button>().onClick.AddListener(() => ButtonPressed(buttonData.id));
        }
        // Start the game by adding the first button
    }

    // Main function to validate that the button pressed by the user 
    // Corresponds with the sequence generated by the CPU

    // Add another number to the sequence and display it
    void AddToSequence()
    {
        // Add a new button to the sequence
        sequence.Add(UnityEngine.Random.Range(0, buttons.Count));
        StartCoroutine(PlaySequence());
    }



    IEnumerator PlaySequence()
    {
        Texto.text = "Sequence";  // Cambio de texto a "Sequence"
        yield return new WaitForSeconds(delay);
        foreach (int index in sequence) {
            buttons[index].Highlight();
            yield return new WaitForSeconds(delay);
        }
        playerTurn = true;
        Texto.text = "Your Turn";  // Cambio de texto a "Your Turn"
    }

    public void ButtonPressed(int index) {
        if (playerTurn && index >= 0 && index < buttons.Count) {
            if (index == sequence[counter]) {
                counter++;
                buttons[index].Highlight();
                if (counter == sequence.Count) {
                    playerTurn = false;
                    level++;
                    counter = 0;
                    AddToSequence();
                    Turno.text = $"Turns: {level}";
                }
            } else {
                Debug.Log("Game Over!");
                GameOver();
            }
        }   
    }

    public void RestartGame() {
        sequence.Clear();
        level = 0;
        counter = 0;
        playerTurn = false;
        Turno.text = "Turno: 0";
    AddToSequence();
    }  

    void UpdateHighScore(int currentScore) {
    int highScore = PlayerPrefs.GetInt("HighScore", 0);
    if (currentScore > highScore) {
        PlayerPrefs.SetInt("HighScore", currentScore);
        PlayerPrefs.Save();
    }
    }

    IEnumerator HandleGameOver(int currentScore) {
    UpdateHighScore(currentScore); 
    Texto.text = "Game Over!";
    yield return new WaitForSeconds(4); 
    SceneManager.LoadScene("Perder");
    }
}